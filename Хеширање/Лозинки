import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import java.lang.*;


class MapEntry<K extends Comparable<K>,E> implements Comparable<K> {
// Each MapEntry object is a pair consisting of a key (a Comparable
// object) and a value (an arbitrary object).
K key;
E value;
public MapEntry (K key, E val) {
this.key = key;
this.value = val;
}
public int compareTo (K that) {
// Compare this map entry to that map entry.
@SuppressWarnings("unchecked")
MapEntry<K,E> other = (MapEntry<K,E>) that;
return this.key.compareTo(other.key);
}
public String toString () {
return "<" + key + "," + value + ">";
}
}




class SLLNode<E> {
 
    private E element;
    public SLLNode<E> succ;
   
    public SLLNode(E element, SLLNode<E> succ) {
        this.setElement(element);
        this.succ = succ;
    }
   
    @Override
    public String toString() {
        return getElement().toString();
    }
 
    public E getElement() {
        return element;
    }
 
    public void setElement(E element) {
        this.element = element;
    }
 
}





class CBHT<K extends Comparable<K>, E> {
private SLLNode<MapEntry<K,E>>[] buckets;
@SuppressWarnings("unchecked")
public CBHT(int m) {
// Construct an empty CBHT with m buckets.
buckets = (SLLNode<MapEntry<K,E>>[]) new
SLLNode[m];
}
private int hash(K key) {
// Translate key to an index of the array buckets.
return Math.abs(key.hashCode()) % buckets.length;
}
public SLLNode<MapEntry<K,E>> search(K targetKey) {
// Find which if any node of this CBHT contains an
// entry whose key is equal to targetKey.
// Return a link to that node (or null if there is none).
int b = hash(targetKey);
for (SLLNode<MapEntry<K,E>> curr = buckets[b]; curr != null; curr =
curr.succ) {
if (targetKey.equals(((MapEntry<K, E>) curr.getElement()).key))
return curr;
}
return null;
}
public void insert(K key, E val) {
// Insert the entry <key, val> into this CBHT.
MapEntry<K, E> newEntry = new MapEntry<K, E>(key, val);
int b = hash(key);
for (SLLNode<MapEntry<K,E>> curr = buckets[b]; curr != null; curr =
curr.succ) {
if (key.equals(((MapEntry<K, E>) curr.getElement()).key)) {
// Make newEntry replace the existing entry ...
curr.setElement(newEntry);
return;
}
}
// Insert newEntry at the front of the 1WLL in bucket b ...
buckets[b] = new SLLNode<MapEntry<K,E>>(newEntry, buckets[b]);
}
 public void delete(K key) {
// Delete the entry (if any) whose key is equal
// to key from this CBHT.
int b = hash(key);
for (SLLNode<MapEntry<K,E>> pred = null, curr = buckets[b];
curr != null; pred = curr, curr = curr.succ) {
if (key.equals(((MapEntry<K,E>) curr.getElement()).key)) {
if (pred == null)
buckets[b] = curr.succ;
else
pred.succ = curr.succ;
return;
}
}
}
}









public class Lozinki {
    public static void main (String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());
       
       
        CBHT<String,String> table = new CBHT<String,String>(2*N);
        for(int i=1;i<=N;i++){
            String imelozinka = br.readLine();
            String[] pom = imelozinka.split(" ");
            table.insert(pom[0], pom[1]);
        }
       
        while (true) {
            String line = br.readLine();
            if (line.equals("KRAJ"))
                break;
            String parts [] = line.split(" ");
            SLLNode<MapEntry<String,String>> temp = table.search(parts[0]);
            if (temp == null || !(temp.getElement().value.equals(parts[1])))
                System.out.println("Nenajaven");
            else {
                System.out.println("Najaven");
                break;
            }
           
        }
       
    }
}
